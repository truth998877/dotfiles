#!/bin/bash

foo () {
  local first=$1
  echo "Would foo with $first."
}

tweetnow () {

  local game="$1"
  local video_id="$2"
  #local twitterhashtags="$3"

  str="Check out this video from my walkthrough of $game: https://youtu.be/$video_id #$game #youtube #gaming" #$twitterhashtags 
  #why is there a @game?
  
  twitter post "$str"

}

tweetlater () {

  echo "Schedule tweets for the future"

}

post2facebook () {


  #echo "To post video to facebook page"

  local video_id="$2"
  local game="$1"

  local link="https://youtu.be/$video_id"
  local str="Check out this video from my walkthrough of $game"

  facebook postlink2page "$link" "$str"

}

main () {

#not tested
#video ids will need to be sorted on date
#perhaps change this or add a function to generate a multi-link tweet.
#TODO need to change this some that there is a facebook now function and a facebook later function
#TODO move jq stuff to json fun

  local shouldbe="$1" 

  while read line;do
  #TODO the jq query in the heredoc needs to make sure that videos are returned in date order - "added" added to shouldbe as a unix timestamp


    local shouldbeindex=$(jq --arg line "$line" '.|map(.video_id==$line)|index(true)' "$shouldbe")  
    local game=$(jq -r --argjson shouldbeindex $shouldbeindex '.[$shouldbeindex].game' "$shouldbe")

    tweetnow "$game" "$line"
    
    #tweetlater "$game" "$line"  
    
    post2facebook "$game" "$line"  
    
    #Others here
    
    jsonfun setpromoted "$shouldbe" "$shouldbeindex"

  done<<<$(jq -r '.[]|select((.ready2publish != null) and (.ready2publish=true) and (.published=true) and (.promoted=false))|.video_id' "$shouldbe")

  postvids2blog main "$shouldbe"
 
}

############################## Main Command  #############################

subcommand="${1-usage}"
shift 2>/dev/null

if [ -z "$subcommand" ]; then
    usage
    exit 1
fi

commands () {
    echo ${commands[@]}
}

declare -a commands=(foo commands main)

for i in ${commands[@]}; do
    if [[ "$i" == "$subcommand" ]]; then
        "$subcommand" "$@"
        exit 0
    fi
done

######################### Tab Completion Context ########################

# remember COMP_LINE is changed by shift
if [ -n "$COMP_LINE" ]; then
    for cmd in ${commands[@]}; do 
        [[ "${cmd:0:${#1}}" == "$1" ]] && echo $cmd
    done
    exit 0
fi


## set up auto complate by running 'complete -C ./example ./example'

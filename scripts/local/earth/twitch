#!/bin/bash

############tokens and stuff for current streamer#######

currentstreamer=$(cat /home/tony/currentchannel)

#echo $currentstreamer

#app stuff
clientid=$(cat ~/.secrets/twitch/client-id)
appccesstoken=$(cat ~/.secrets/twitch/app-access-token)

#streamer stuff
twitchid=$(cat ~/.secrets/twitch/"$currentstreamer"/twitch-id)
#echo "$twitchid"
clientsecret=$(cat ~/.secrets/twitch/client-secret)
useraccesstoken=$(cat ~/.secrets/twitch/"$currentstreamer"/user-access-token)
oauthtoken=$(cat ~/.secrets/twitch/"$currentstreamer"/oauth-token)

###The following scopes are required######
#
#
#

######################################################

foo () {
  local first=$1
  echo "Would foo with $first."
}

#######################twitch functions###############

wee () {
    declare buf="$*"
    if [ ! -p ~/.weechat/weechat_fifo ]; then
        echo "WeeChat not running?" >&2
        return 1
    fi  
    if [ -n "$buf" ]; then
        echo "*$buf"  > ~/.weechat/weechat_fifo
        return 0
    fi  
    while IFS= read -r line; do
        echo "*$line" > ~/.weechat/weechat_fifo
    done
}

slash () {
    declare cmd="$1"
    shift 2>/dev/null
    wee "/msg $currentstreamer /$cmd $*"
}

_send_to_twitch () {

  local type="$1"
  local endpoint="$2"
	local json="$3"


  curl -s -X "$type" "https://api.twitch.tv/helix/$endpoint?broadcaster_id=$twitchid" \
    -H "Authorization: Bearer $useraccesstoken" \
    -H "Client-Id: $clientid" \
    -H 'Content-Type: application/json' \
    --data-raw "$json"

}

#######################################################

###########twitch commands#############################

mod () {

    #sets a user, $1, as a moderator
    if [ -z "$1" ]; then
        echo 'usage: mod <twitchid>'
        return 1
    fi
 
    local user_id="$1"
    local json='{"user_id":"'$user_id'"}'

    _send_to_twitch "POST" "moderation/moderators" "$json"

 #   slash mod $1
}

unmod () {
    #unsets a user, $1, as a moderator
    if [ -z "$1" ]; then
        echo 'usage: unmod <twitchid>'
        return 1
    fi
    
		local user_id="$1"
    local json='{"user_id":"'$user_id'"}'
    
		_send_to_twitch "DELETE" "moderation/moderators" "$json"
#    slash unmod "$1"

}

raid () {
    
		if [ -z "$1" ]; then
        echo 'usage: raid <twitchid>'
        return 1
    fi
    
		local user_id="$1"
    local json='{"to_broadcaster_id":"'$user_id'", "from_broadcaster_id":"'$currentstreamer'" 	}'

    _send_to_twitch "POST" "raids" "$json"

		#slash raid $1
}

unraid() {
    slash unraid
}

slow() {
    
		if [ -z "$1" ]; then
        echo 'usage: <seconds>'
        return 1
    fi

		local waitime="${1:-5}"
    
		local json='{"slow_mode":"true", "slow_mode_wait_time":"'$waittime'" 	}'
    _send_to_twitch "PATCH" "chat/settings" "$json"
    
		#slash slow "$1"
}

slowoff() {
		
		local json='{"slow_mode":"false"}'
    
		_send_to_twitch "PATCH" "chat/settings" "$json"
    #slash slowoff
}

vip () {
    if [ -z "$1" ]; then
        echo 'usage: vip <twitchid>'
        return 1
    fi

    local user_id="$1"

		local json='{"user_id"="'$user_id'"}'
		_send_to_twitch "POST" "channels/vip" "$json"
    
		#slash vip $1
}

unvip () {
    if [ -z "$1" ]; then
        echo 'usage: unvip <twitchid>'
        return 1
    fi

    local user_id="$1"

		local json='{"user_id"="'$user_id'"}'
		_send_to_twitch "DELETE" "channels/vip" "$json"
    
		#slash vip $1
}

ban () {
    if [ -z "$1" ]; then
        echo 'usage: ban <twitchid>'
        return 1
    fi
		
		local json='{"data":{"user_id"="'$user_id'"}'
		_send_to_twitch "POST" "moderation/ban" "$json"
#    slash ban $1
}

timeout () {
    if [ -z "$1" ]; then
        echo 'usage: timeout <twitchid> <days>'
        return 1
    fi

		local days="${2:-1}"

		duration="$(( $2 * 86400 ))"
		
		local json='{"data":{"user_id"="'$user_id'", "duration"="'$duration'", "reason": "stupidity"}}'
		_send_to_twitch "POST" "moderation/ban" "$json"
#    slash ban $1 $2
}

unban () {
    if [ -z "$1" ]; then
        echo 'usage: ban <twitchid>'
        return 1
    fi

		local user_id="$1"
		
		local json='{"data":{"user_id"="'$user_id'"}'
		_send_to_twitch "DELETE" "moderation/ban" "$json"
    #slash ban $1

}

untimeout () {
    if [ -z "$1" ]; then
        echo 'usage: untimeout <twitchid>'
        return 1
    fi

		local user_id="$1"
		unban "$userid"
    #slash slash untimeout $user_id

}

event-subscriptions () {

#  echo event subs

  local session_id="$1"
  #local subscription_types=("channel.follow" "channel.subscribe" "channel.raid" "channel.cheer")
  local subscription_types=("channel.follow" "channel.subscribe") # "channel.subscribe" "channel.raid" "channel.cheer")
	#local versions=(2 1 1 1)
	local versions=(2 1)

  for i in "${!subscription_types[@]}";do
    #echo "${version[@]}"
    local json='{"type":"'${subscription_types[i]}'", "version":"'${versions[i]}'","condition":{"broadcaster_user_id":"'$twitchid'", "moderator_user_id": "'$twitchid'"},"transport":{"method":"websocket","session_id":"'$session_id'"}}'
		#echo "$json"
		_send_to_twitch "POST" "eventsub/subscriptions" "$json" > /dev/null
    
  done

}

read-websocket () {

  local server="wss://eventsub.wss.twitch.tv/ws"
  if [[ $1 == test ]];then
    server="ws://127.0.0.1:8080/ws"
  fi

  while IFS=  read -r line; do
    #echo "$line"
    #echo "$line"|jq -r .metadata.message_type
		local message_type="$(echo "$line"|jq -r .metadata.message_type)"
    
		case "$message_type" in
  
      session_welcome)
        local session_id="$(echo $line|jq -r .payload.session.id)"
        event-subscriptions "$session_id"
      
  		;;
  
      notification)
        local type="$(echo $line|jq -r .metadata.subscription_type)"
  			case $type in
  
          channel.follow)
  			  local userid="$(echo $line|jq -r .payload.event.broadcaster_user_name)" 
  				event follower "$userid"
  				;;
  			
  			  channel.subscribe)
  				local userid="$(echo $line|jq -r .payload.event.broadcaster_user_name)"
  				event subscription "$userid"
  			  ;;
  			  
  				channel.raid)
  			  ;;
          
  				channel.cheer)
  				;;
  				
  				*)
  				;;
        
  			esac
      ;;

  		*)
  		;;
    
  	esac
        
  done < <(websocat $server)

}

#####################################################


###########twitch settings##########################


updategame () {

  local game="$*"

  local json='{"game_id":"'$game'"}'

  _send_to_twitch "POST" "channels" "$json"
  
#curl -X PATCH "https://api.twitch.tv/helix/channels?broadcaster_id=$twitchid" \
#    -H "Authorization: Bearer $useraccesstoken" \
#    -H "Client-Id: $clientid" \
#    -H 'Content-Type: application/json' \
#    --data-raw "$json"

}

updatetitle () {

  local title="$*"
  local json='{"title":"'$title'"}'


 _send_to_twitch channels "$json"

}


updatechannel () {

  local game="$1"
  local title="$2"
  local lang="en"

  local json='{"game_id":"'$game'", "title":"'$title'", "broadcaster_language":"'$lang'"}'

  _send_to_twitch channels "$json"

#  curl -X PATCH "https://api.twitch.tv/helix/channels?broadcaster_id=$twitchid" \
#    -H "Authorization: Bearer $useraccesstoken" \
#    -H "Client-Id: $clientid" \
#    -H 'Content-Type: application/json' \
#    --data-raw "$json"

}
####################################################


tmux () {

#TODO is this being used somewhere?
 tmux new-session \; \split-window -v \; \split-window -h \; \select-pane -t 0 \; \split-window -h

}


###############twitch aosd_cat overlays#############

#TODO - move position of overlays now dual screened


chatoverlay () {

  while true; do 
    text=$(cat -e /home/tony/.weechat/logs/irc.twitch.\#fortiesgamer.weechatlog|tail -f)
    echo -e ${text//\$/\\r}| \
    ##aosd_cat -l 5 -u 5000 -p 3 -y 0 -x 0 -n 10  --fore-color yellow 
    aosd_cat -l 5 -u 5000 -p 3 -y 0 -x 1920 -n 10  --fore-color yellow 
  done &

}

timeoverlay () {

  local lines=1

 # while true ; do date ; sleep 1 ; done | aosd_cat -l "$lines" --fore-color yellow -p 0 -y 50 -x 50 -u 1000 &
 # while true ; do date ; sleep 1 ; done | aosd_cat -l "$lines" --fore-color yellow -p 2 -y 50 -x -50 -u 1000 &
 # while true ; do date ; sleep 1 ; done | aosd_cat -l "$lines" --fore-color yellow -p 6 -y -50 -x 50 -u 1000 &
  while true ; do date ; sleep 30 ; done | aosd_cat -l "$lines" --fore-color yellow -p 2 -x 0 -y 0 -u 30000 -n 10 &

#  while true ; do cat MYFIFO; done | aosd_cat --fore-color yellow -l $lines -u 10000 &
 
}

sensoroverlay () {

local text

while true;do 
  text=$(sensors)
  text=${text#*)}
  text=${text%it8*}
  ##text=${text//  (high = +80.0°C, crit = +98.0°C)/\\r}
  #text=${text//  (high = +85.0°C, crit = +105.0°C)/\\r}
  text=${text//  (high = +85.0°C, crit = +105.0°C)/}
  text=${text//: / = }
  
  text1=$(nvidia-smi -q -d TEMPERATURE| grep "GPU Current Temp")
  text1="${text1//[[:space:]]/}"
  #text1="${text1//CGPU/C\\rGPU}"
  text1="${text1//CGPU/C\ GPU}"
  #text1="${text1//:/\ }"
  text1="${text1//:/\ = }"

  text2=$(nvidia-smi --query-gpu="fan.speed" --format=csv)
  text2=${text2//fan.speed \[%\]};text2=${text2//\ %/%}
  text2=${text2//[[:space:]]}
  #text2=${text2/\%/\%\\rGPU2\ Fan\ Speed\ }
  text2=${text2/\%/\%\ GPU2\ Fan\ Speed\ }

  #echo -e $text\\r$text1\\r\\r"GPU1 Fan Speed "$text2|aosd_cat -l 10 --fore-color yellow -x 0 -y 0 -u 5000 -n 10; done &
  #echo -e $text\\r$text1\\r\\r"GPU1 Fan Speed "$text2|aosd_cat -l 10 --fore-color yellow -x 1920 -y 0 -u 5000 -n 10; done &
  echo -e $text "  -  " $text1 "  -   GPU1 Fan Speed "$text2|aosd_cat -l 1 --fore-color yellow -x 1920 -y 0 -u 5000 -n 10; done &

}

overlay () {

  weechat &

  chatoverlay
  timeoverlay
  sensoroverlay

}

killoverlay () {

  killall aosd_cat
  killall sceneoverlay
  killall twitch

}

##################################################

#####twitch event listener and notification#######

scroll ()  {
    scroll_by="$1"
    max_length="$2"
    line="$3"
    end_chars="$(printf %"$max_length"s)"
    # from the string $line take the last $scroll_by chars, then take
    # only the last max_lenght chars of those.
    echo -n  "$end_chars" "$line" | tail -c "$scroll_by"  | head -c "$max_length"
    # if the newline in the command above wouldn't be suppressed it
    # might be cut away by head, so we add it here afterwards
    echo ""
}

plane () {

    #retired  

    # naming the arguments for readability
    local frame="$1"
    local width="$2"
    local height="$3"

    case $(($frame%4)) in
        0)
            scroll $frame $width "/----------------------\              ___               "
            scroll $frame $width "|                      |              \~~\_____/~~\__   "
            scroll $frame $width "|      Automation      |______________ \______====== )-+"
            scroll $frame $width "|                      |                       ~~|/~~   "
            scroll $frame $width "\----------------------/                         ()     "
            ;;
        2)
            scroll $frame $width "/----------------------\              ___               "
            scroll $frame $width "|                      |              \~~\_____/~~\__  |"
            scroll $frame $width "|      Automation      |______________ \______====== )-+"
            scroll $frame $width "|                      |                       ~~|/~~  |"
            scroll $frame $width "\----------------------/                         ()     "
            ;;
        [1,3])
            scroll $frame $width "/----------------------\              ___               "
            scroll $frame $width "|                      |              \~~\_____/~~\__  ."
            scroll $frame $width "|      Automation      |______________ \______====== )-+"
            scroll $frame $width "|                      |                       ~~|/~~  '"
            scroll $frame $width "\----------------------/                         ()     "
            ;;
    esac

}


plane2 () {
    # naming the arguments for readability
    local frame="$1"
    local width="$2"
    local height="$3"
    local banner1="$4"
    local banner2="$5"
    local banner3="$6"
    local banner4="$7"
    local banner5="$8"

    #TODO change this after the global plane variables have been created
    case $(($frame%4)) in
        0)
            scroll $frame $width "${banner1}              ___               "
            scroll $frame $width "${banner2}              \~~\_____/~~\__   "
            scroll $frame $width "${banner3}______________ \______====== )-+"
            scroll $frame $width "${banner4}                       ~~|/~~   "
            scroll $frame $width "${banner5}                         ()     "
            ;;
        2)
            scroll $frame $width "${banner1}              ___               "
            scroll $frame $width "${banner2}              \~~\_____/~~\__  |"
            scroll $frame $width "${banner3}______________ \______====== )-+"
            scroll $frame $width "${banner4}                       ~~|/~~  |"
            scroll $frame $width "${banner5}                         ()     "
            ;;
        [1,3])
            scroll $frame $width "${banner1}              ___               "
            scroll $frame $width "${banner2}              \~~\_____/~~\__  ."
            scroll $frame $width "${banner3}______________ \______====== )-+"
            scroll $frame $width "${banner4}                       ~~|/~~  '"
            scroll $frame $width "${banner5}                         ()     "
            ;;
    esac

}

event () {
#TODO customise for twitch event type, follower, sub, donation etc
#TODO add an input to plane to allow the event type to be passed to it as text
#TODO write the text that forms the interior of the banner from variables which extent the length of the banner to accommodate the length of the event type and the user name
#TODO final number of the sequence in for the for loop will have to be large enough to accommodate the width of the terminal and the width of the plane and the banner, having been adjusted to accommodate the event type and user name
#TODO output this to a new window in in the twitch tmux
#TODO work out how to get this to work with aosd_cat to overlay events when gaming full screen

  local eventtype="$1"
  local username="$2"
  local usernamelen=${#username}

  case "$eventtype" in 
    follower)
      local eventstr="New Follower"
      ;;
    subscription)
      local eventstr="New Subscription"
      ;;
    donation)
      local eventstr="New Donation"
      ;;
    bits)
      #TODO add number of bits
      local eventstr="Bits Sent From"
      ;;
    raid)
      #TODO
      ;;
    *)
      exit 1
      ;;
  esac

  eventstrlen=${#eventstr} 
 
#TODO make these global and move to top
    local plane11="              ___               "
    local plane21="              \~~\_____/~~\__   "
    local plane31="______________ \______====== )-+"
    local plane41="                       ~~|/~~   "
    local plane51="                         ()     "
            
       
    local plane12="              ___               "
    local plane22="              \~~\_____/~~\__  |"
    local plane32="______________ \______====== )-+"
    local plane42="                       ~~|/~~  |"
    local plane52="                         ()     "
      
    local plane13="              ___               "
    local plane23="              \~~\_____/~~\__  ."
    local plane33="______________ \______====== )-+"
    local plane43="                       ~~|/~~  '"
    local plane53="                         ()     "
  

  #if $usernamelen -gt 18 and odd
  local banner1pad=$(($usernamelen+3))
  local banner5pad=$banner1pad
  #local banner2pad=$((5+(($usernamelen-18)/2)))
  local banner2pad=$(((22-$eventstrlen)/2+(($usernamelen-18)/2)))
  local banner2pad1=$banner2pad
  local banner4pad=1
  local banner4pad1=2

  #if $usernamelen -gt 18 and even
  if [[ $usernamelen%2 -eq 0 ]]; then
    local banner1pad=$(($usernamelen+4))
    local banner5pad=$bannerpad1
    local banner4pad=2
    local banner4pad1=$banner4pad
  fi

  #if usernamelen -le 18 and odd
  if [[ $usernamelen -le 18 ]]; then
    local banner1pad=22
    local banner2pad=$(((22-$eventstrlen)/2))
    local banner2pad1="$banner2pad"
    local banner4pad=$(((21-$usernamelen)/2))
    local banner4pad1=$((banner4pad+1))

    #if usernamelen -le 18 and even
    if [[ $usernamelen%2 -eq 0 ]]; then
      local banner4pad=$(((22-$usernamelen)/2))
      local banner4pad1=$banner4pad      
    fi
  fi
 
  local banner1a=$(printf "%*s%s" $banner1pad '' '')
  local banner1="/${banner1a// /-}\\"
  local banner2="|$(printf "%*s%s" $banner2pad '' "$eventstr")$(printf "%*s%s" $banner2pad1 '' '')|"
  local banner3="|${banner1a}|"
  local banner4="|$(printf "%*s%s" $banner4pad '' "$username")$(printf "%*s%s" $banner4pad1 '' '')|"
  local banner5="\\${banner1a// /-}/"

  if [ -z "$3" ]; then
  
    num=$((180+$banner1pad+2+33)) #180 width of terminal, ? width of banner, 33 width of plane
    
    clear

    for i in $(seq $num);do
      plane2 "$i" 180 5 "${banner1}" "${banner2}" "${banner3}" "${banner4}" "${banner5}"
      sleep 0.06
      clear
    done
#    exit 0
    return

  fi

#original settings
#1300, 17, 250

#TODO to cope with long usernames the -w setting will need to be tied to the total length of the banners
  if [[ "$3" -eq "osd" ]]; then
    for i in {0..2000..7};do
      
      case $(($i%4)) in
 
      0)      
      echo -e "$banner1$plane11\r$banner2$plane21\r$banner3$plane31\r$banner4$plane41\r$banner5$plane51" | \
      aosd_cat -u 10 --fore-color yellow -x "$i" -p 0 -y 50 -l 5 -a 2 -n 'mono' -w 600
      ;;

      [-2,2])
      echo -e "$banner1$plane12\r$banner2$plane22\r$banner3$plane32\r$banner4$plane42\r$banner5$plane52" | \
      aosd_cat -u 10 --fore-color yellow -x "$i" -p 0 -y 50 -l 5 -a 2 -n 'mono' -w 600
      ;;

      [-1,1,-3,3])
      echo -e "$banner1$plane13\r$banner2$plane23\r$banner3$plane33\r$banner4$plane43\r$banner5$plane53" | \
      aosd_cat -u 10 --fore-color yellow -x "$i" -p 0 -y 50 -l 5 -a 2 -n 'mono' -w 600
      ;;

      esac
      
      #sleep 0.01
    
    done &
  fi

}

eventosd () {

  #retired - use 'event <blah> osd' instead

  local eventtype="$1"
  local username="$2"
  local usernamelen=${#username}

  case "$eventtype" in 
    follower)
      local eventstr="New Follower"
      ;;
    subscription)
      local eventstr="New Subscription"
      ;;
    donation)
      #TODO add dono
      local eventstr="New Donation"
      ;;
    bits)
      #TODO add number of bits
      local eventstr="Bits Sent From"
      ;;
    *)
      exit 1
      ;;
  esac

  eventstrlen=${#eventstr} 
  

  #TODO $text to be set using variables to accomodate event type and username

  local text="/----------------------\              ___               \r|                      |              \~~\_____/~~\__   \r|      Automation      |______________ \______====== )-+\r|                      |                       ~~|/~~   \r\----------------------/                         ()     "

  for i in {0..1300..18};do
   echo -e "$text"|aosd_cat -u 250 --fore-color yellow -x "$i" -p 0 -y 50 -l 5 -a 2 -n 'mono'
   #sleep 0.01
  done &

}


getfollowers () {

  if [[ ! -d /home/tony/"$currentstreamer" ]]; then
    mkdir -p /home/tony/"$currentstreamer" 
    touch /home/tony/"$currentstreamer"/followers.json
  fi

  
  curl -s \
       -X GET "https://api.twitch.tv/helix/channels/followers?broadcaster_id=$twitchid" \
       -H "Authorization: Bearer $useraccesstoken" \
       -H "Client-Id: $clientid" | \
       jq -r '{followers: [.data[]|{user_name: .user_name , followed_at: .followed_at}]}' > /home/tony/"$currentstreamer"/followers.json
 
       #TODO add followers rolls of honour here
       #TODO decide where followers.json will be stored and make "$currentstreamer-followers.json"

}

events () {

#echo "To check for new followers"

local period=20

  while true;do

    local now="$(date --utc +%FT%TZ --date "$time seconds ago")"
    #local now="2020-04-06T10:15:30Z"
    #local now="2020-04-02T12:49:47Z"
    
    #get followers
    getfollowers
    
    #get subscribers
    #getsubscribers

    #echo "$now"
    #echo "$followers"

    #obtain list of new followers after $now
    #TODO update for new location of followers.json
    #local newfollowers=$(jq -r --arg now $now  '.followers[]|select(((.followed_at)|strptime("%Y-%m-%dT%H:%M:%SZ") | mktime)|. > ($now|strptime("%Y-%m-%dT%H:%M:%SZ") | mktime)).from_login' /home/tony/"$currentstreamer"/followers.json) #in followers select records where .followed_at is after $now and return .from_login values
    local newfollowers=$(jq -r --arg now $now  '.followers[]|select(((.followed_at)|strptime("%Y-%m-%dT%H:%M:%SZ") | mktime)|. > ($now|strptime("%Y-%m-%dT%H:%M:%SZ") | mktime)).user_name' /home/tony/"$currentstreamer"/followers.json) #in followers select records where .followed_at is after $now and return .from_login values
    #TODO will need to be updated when new location for followers.json is decided
    
    #TODO
    #local newsubscribers=??
 
    local count=0

    for newfollower in $newfollowers;do
      event follower "$newfollower"
      wait
      ((count++))
    done

    #TODO
    #for newsubscriber in $newsubscribers;do
    #  event subscriber "$newsubscriber"  #plus other arguments, tier, gifted etc.
    #  wait
    #  ((count++))
    #done

    
    time=$((60 + "$period" * "$count"))
 
    sleep 60
 
  done 
}

getsubscribers () {

  curl -s \
       -X GET "https://api.twitch.tv/helix/subscriptions?broadcaster_id=$twitchid" \
       -H "Authorization: Bearer $useraccesstoken" \
       -H "Client-Id: $clientid" | \
        jq '.data[]|{from_login: .from_login}'  


}

marker () {

#echo To set a twitch marker
  
  local what="$*"
  if (( ${#what} > 140 )); then
    what="$(what:0:140)" # marker text limited to 140 chars
  fi

  curl -X POST "https://api.twitch.tv/helix/streams/markers" \
       -H "Authorization: Bearer $useraccesstoken" \
       -H "Client-Id: $clientid" \
       -H 'Content-Type: application/json' \
       -d "{"user_id":"$twitchid", "description":"$what"}" | \
        jq -r '.data[].created_at'

}

gameid () {

  local gamename="$*"

  gamename="$(echo $gamename|jq -Rr '@uri')"

  curl -s -X GET "https://api.twitch.tv/helix/games?name=$gamename" \
    -H "Authorization: Bearer $useraccesstoken" \
    -H "Client-Id: $clientid" | \
    jq -r '.data[].id' 


}

##########################################################################



############################## Main Command  #############################

subcommand="${1-usage}"
shift 2>/dev/null

if [ -z "$subcommand" ]; then
    usage
    exit 1
fi

commands () {
    echo ${commands[@]}
}

declare -a commands=(foo commands read-websocket tmux overlay timeoverlay chatoverlay sensoroverlay killoverlay event eventosd getfollowers getsubscribers events ban vip raid mod slow slash slowoff host unban unhost unmod unraid unvip timeout untimeout marker gameid updatechannel updatetitle updatetitle1  updategame)

for i in ${commands[@]}; do
    if [[ "$i" == "$subcommand" ]]; then
        "$subcommand" "$@"
        exit 0
    fi
done

######################### Tab Completion Context ########################

# remember COMP_LINE is changed by shift
if [ -n "$COMP_LINE" ]; then
    for cmd in ${commands[@]}; do 
        [[ "${cmd:0:${#1}}" == "$1" ]] && echo $cmd
    done
    exit 0
fi


## set up auto complate by running 'complete -C ./example ./example'

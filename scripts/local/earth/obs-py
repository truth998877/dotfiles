#!/usr/bin/python3

import logging
import argparse
#logging.basicConfig(level=logging.DEBUG)
import asyncio
import simpleobsws

parameters = simpleobsws.IdentificationParameters(ignoreNonFatalRequestChecks = False) # Create an IdentificationParameters object (optional for connecting)

ws = simpleobsws.WebSocketClient(url = 'ws://localhost:4455', password = 'Oidwk1oznW3fKQqz', identification_parameters = parameters) # Every possible argument has been passed, but none are required. See lib code for defaults.

async def make_single_request(request):
#    print(Request)
    await ws.connect() # Make the connection to obs-websocket
    await ws.wait_until_identified() # Wait for the identification handshake to complete

    #request = simpleobsws.Request(Request) # Build a Request object
    #request=simpleobsws.Request('SetCurrentProgramScene',{'sceneName':'Talk'})

    ret = await ws.call(request) # Perform the request
    if ret.ok(): # Check if the request succeeded
        return 1
#        print("Request succeeded! Response data: {}".format(ret.responseData))
    else:
        return 0
#        print("Response data: {}".format(ret.responseData))

    await ws.disconnect() # Disconnect from the websocket server cleanly

async def make_batch_request(Requests):
    await ws.connect() # Make the connection to obs-websocket
    await ws.wait_until_identified() # Wait for the identification handshake to complete

    ret = await ws.call_batch(requests, halt_on_failure = False) # Perform the request batch

    for result in ret:
        if ret.ok(): # Check if the request succeeded
           print("Request succeeded! Response data: {}".format(ret.responseData))

    await ws.disconnect() # Disconnect from the websocket server cleanly



parser = argparse.ArgumentParser(
                    prog='ProgramName',
                    description='What the program does',
                    epilog='Text at the bottom of help')

parser.add_argument('-s', '--scenechange')
parser.add_argument('-b', '--batch')
parser.add_argument('--stream-on', action='store_true')
parser.add_argument('--stream-off', action='store_true')
parser.add_argument('--record-on', nargs='?', const='/home/tony/GameCaptures/livestudy')
parser.add_argument('--record-dir', nargs='?', const='/home/tony/GameCaptures/livestudy')
parser.add_argument('--record-off', action='store_true')
parser.add_argument('-a','--animate')
parser.add_argument('-v','--version', action='store_true')
parser.add_argument('--is-running')
args = parser.parse_args()

if args.scenechange:
    requestIn=simpleobsws.Request('SetCurrentProgramScene',{'sceneName':args.scenechange})
    loop = asyncio.get_event_loop()
    status=loop.run_until_complete(make_single_request(requestIn))
    if status == 1:
        print('ok')

if args.stream_on: 
    requestIn=simpleobsws.Request('StartStream')
    loop = asyncio.get_event_loop()
    status=loop.run_until_complete(make_single_request(requestIn))
    if status == 1:
        print('ok')

if args.version: 
    requestIn=simpleobsws.Request('GetVersion')
    loop = asyncio.get_event_loop()
    status=loop.run_until_complete(make_single_request(requestIn))
    if status==1:
       print('ok')

if args.stream_off:
    requestIn=simpleobsws.Request('StopStream')
    loop = asyncio.get_event_loop()
    loop.run_until_complete(make_single_request(requestIn))

if args.record_on:
    #print('here')
    requestIn=simpleobsws.Request('SetProfileParameter', { 'parameterCategory': 'SimpleOutput', 'parameterName': 'FilePath', 'parameterValue': args.record_on })
    loop = asyncio.get_event_loop()
    loop.run_until_complete(make_single_request(requestIn))
    requestIn=simpleobsws.Request('StartRecord')
    loop = asyncio.get_event_loop()
    status=loop.run_until_complete(make_single_request(requestIn))
    if status == 1:
        print('ok')

if args.record_dir:
    requestIn=simpleobsws.Request('SetProfileParameter', { 'parameterCategory': 'SimpleOutput', 'parameterName': 'FilePath', 'parameterValue': args.record_dir })
    loop = asyncio.get_event_loop()
    loop.run_until_complete(make_single_request(requestIn))

if args.record_off:
    requestIn=simpleobsws.Request('StopRecord')
    loop = asyncio.get_event_loop()
    status=loop.run_until_complete(make_single_request(requestIn))
    if status == 1:
        print('ok')

if args.batch:
    requests = []
    for request in arg.batch:
        requests.append(simpleobsws.Request(request)) # Build a Request object, then append it to the batch
        asyncio.run(make_batch_request(requests))

#if arg.animate:
#    import * from obs-py-animate
#    asyncio.run(run_animation(ags.animate))

#!/bin/bash

#where's anki
URL=localhost
PORT=8765

# tell the script what the current deck is
[[ -r CURRENTANKIDECK ]] && source CURRENTANKIDECK;


#communicate with anki
_curl () {

  local args="$1"
  
  curl $URL:$PORT -s -X POST -d "$args"

}

#set which deck to interact with
set-deck () {

  echo "The current deck is:"
  current-deck

  read -p "Continue? [y/n]: " response

  case $response in

    n) 
      exit 0
    ;;
    
    y)
    ;;
    
    *)
      echo "Response not supported"
      exit 0
    ;;
  
  esac     

  select deck in $(ls-decks)
  do
    echo "export CURRENTANKIDECK=$deck" > CURRENTANKIDECK
    break
  done

}

#list all the decks
ls-decks () {

  local str='{"action": "deckNames", "version": 6}'

  local response="$(_curl "$str"|jq -r .result[])"  

  echo "$response" 

}

#create a deck
touch-deck () {

  local deckname="$1"

  local str='{"action": "createDeck", "version": 6, "params": {"deck": "'"$deckname"'"}}'

  local response="$(_curl "$str"|jq -r .result)"   

  echo "$response" 

}

#delete a deck
rm-deck () {

  select deck in $(ls-decks)
  do
   deckname=$deck
   break
  done

 # local deckname="$1"

  str='{"action": "deleteDecks","version": 6,"params": {"decks": ["'"$deckname"'"],"cardsToo": true}}'

  local response="$(_curl "$str"|jq -r .result)"   
  
  echo "$response" 

}

#return deck info
deck-info () {

  local deckname="$1"
  
  str='{"action": "getDeckConfig","version": 6,"params": {"deck":"'"$deckname"'"}}'

  local response="$(_curl "$str"|jq -r .result)"   

  echo "$response" 
 
}

#get the stats for a deck
deck-stats () { 

  local deckname="$1"

  str='{"action": "getDeckStats", "version": 6,"params": {"decks":["'"$deckname"'"]}}'   

  local response="$(_curl "$str"|jq -r .result)"   

  echo "$response" 
 
}

#return the deck currently set
current-deck () {

 local str="Not Set" 

 if [[ ! -z  "$CURRENTANKIDECK" ]]; then
   str=$CURRENTANKIDECK
 fi

echo "$str"

}

model-names () {

  str='{ "action": "modelNames", "version": 6 }'

  local response="$(_curl "$str"|jq -r .result[])"   

  echo "$response" 
 
}

select-model () {

  #echo "Select Card Type: "
  IFS=$'\n'
  select model in $(model-names)
  do
    echo "$model"
    break
  done

}

model-fieldnames () {

  #local model="$(select-model)"
  local model="$1"

  str='{"action": "modelFieldNames", "version": 6, "params": { "modelName": "'"$model"'"}}'
  
  local response="$(_curl "$str"|jq -r .result[])"   

  echo "$response" 
 
}

add-note () {

  local deck=$CURRENTANKIDECK
  echo "Current deck is set to $deck" 
  read -p "Select different deck? [y/n] " differentdeck

  case $differentdeck in
    y)
      set-deck
      . CURRENTANKIDECK
    ;;
 
    n)
    ;;

    *)
    echo "fuck off"
    exit 0
    ;; 
  
  esac
 
  declare -a contents 
  echo -e "\nSelect model:"
  model="$(select-model)"
  local modelfieldnames="$(model-fieldnames "$model")"
 
  for field in $modelfieldnames;do
    echo -e "\n"
    read -p "Enter the content of "$field": "  contents["$field"]
    echo "${contents["$field"]}"
  done

  echo -e "\n"
  read -p "Enter tags: " tags

 #TODO populate the string, curl the string

  case "$model" in

    Basic)
    
    str='{ "action": "addNote", "version": 6, "params": { "note": { "deckName": "'"$CURRENTANKIDECK"'", "modelName": "'"$model"'", "fields": { "Front": "'"${contents[front]}"'", "Back": "'"${contents[back]}"'" }, "options": { "allowDuplicate": false, "duplicateScope": "deck", "duplicateScopeOptions": { "deckName": "'"$CURRENTANKIDECK"'", "checkChildren": false, "checkAllModels": false } }, "tags": [ "'"$tags"'" ]}}}'

  #echo "$str"  
  
  local response="$(_curl "$str"|jq -r .result)"   

  echo "$response" 
    
    ;;

    *)
       echo "Unsupported model"
       exit 0
    ;;

  esac

} 
############################## Main Command  #############################

subcommand="${1-usage}"
shift 2>/dev/null

if [ -z "$subcommand" ]; then
    usage
    exit 1
fi

commands () {
    echo ${commands[@]}
}

declare -a commands=(ls-decks touch-deck rm-deck deck-info deck-stats commands set-deck current-deck model-names select-modeli model-fieldnames add-note)

for i in ${commands[@]}; do
    if [[ "$i" == "$subcommand" ]]; then
        "$subcommand" "$@"
        exit 0
    fi
done

######################### Tab Completion Context ########################

# remember COMP_LINE is changed by shift
if [ -n "$COMP_LINE" ]; then
    for cmd in ${commands[@]}; do 
        [[ "${cmd:0:${#1}}" == "$1" ]] && echo $cmd
    done
    exit 0
fi


## set up auto complate by running 'complete -C ./example ./example'

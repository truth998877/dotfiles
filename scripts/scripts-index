#!/usr/bin/env bash

foo () {
  local first=$1
  echo "Would foo with $first."
}

echo_scripts_and_functions () {

  local script_list=$(list-scripts)

  while IFS= read -r script_list_line;do
    echo $'\n'"$script_list_line"
      while IFS= read -r function_list_line;do
        echo -e "   $function_list_line"
      done <<< $(list-functions "$script_list_line")
  done <<< $script_list

}

get_user_input_default () {

  local prompt="$1"
  local default="$2"

  read -p "$prompt" response

  if [[ $response == ''  ]];then
    response="$default"
  fi

  echo "$response"

}

get_user_input () {

  local prompt="$1"
  local response

  while [[ $response  == '' ]];do
    read -p "$prompt" response
  done

  echo "$response" 

}

keyless_array () { 

  #local array_name="$1"
  local prompt="$1"
  
  local array_elements
  local response

  while true;do
    array_elements+="\""$(get_user_input "$prompt")"\", "
    response="$(get_user_input "Add another? [y/n]: ")"
    case $response in
      y) continue;;
      n) break;;
    esac
  done
 
#  local output="\""$array_name"\" : ["$array_elements"],"

  echo "${array_elements:0:-2}"

}

keyed_array () {

  local array="$1"
  shift
  local key_list="$@"
  local value
  local output1
  local output
  local response
  
  while true; do
    for item in $key_list;do
      value="$(get_user_input "Enter $array $item: ")"
      output1+="\""$item"\" : \""$value"\","
    done
    output1="${output1:0:-1}"
    output+="{$output1},"
    unset output1
    response="$(get_user_input "Add Another? [y/n]: ")"
    case $response in
      y) continue ;;
      n) break ;;
    esac
  done

  output="${output:0:-1}"

  echo "$output"

}

select_logbook () {
  
  local logbook_titles=("$(ls-lb-num-title)")
  logbook_titles+=("None")
  local OLD_IFS=${IFS};IFS=$'\n'
 
  select logbook in ${logbook_titles[@]};do
    echo "$logbook"
    IFS="${OLD_IFS}"
    break
  done

}

# * Function select-script-from-index: *
select-script-from-index () {
  
  script_list=("$(jq -r '.commands[].name' "$SCRIPTSINDEX")")

  local OLD_IFS=${IFS};IFS=$'\n'

  select cmd in ${script_list[@]};do
    local scriptindex=$(jq -r --arg jq_cmd "$cmd" '[.commands[]|.name == $jq_cmd] |index(true)' "$SCRIPTSINDEX")
    echo "$scriptindex"
    IFS="${OLD_IFS}"
    break
  done

}

# * Function: update *
update ()  {

# * Arguments: *
 

#*Code:
  
  while true;do

    local script_index="$(select-script-from-index)"
    local key_list=("$(jq -r '[.commands[]|keys[]]|unique[]' $SCRIPTSINDEX)")
    
    local OLD_IFS=${IFS};IFS=$'\n'
    
    local selected_key
    select selected_key in ${key_list[@]};do
      echo Selected key = "$selected_key"
      break
    done
    
    IFS="${OLD_IFS}"
    
    cp "$SCRIPTSINDEX" "$SCRIPTSINDEX".tmp
    
    case $selected_key in
      
      name|description|end|platform|locality|status)
        local value
        value="$(get_user_input "Enter new "$selected_key": ")"
        jq --arg jq_script_index "$script_index" --arg jq_selected_key "$selected_key" --arg jq_value "$value"  '.commands[$jq_script_index|tonumber]|.[$jq_selected_key] = $jq_value' "$SCRIPTSINDEX".tmp
      ;;
      
      "associated commands"|dependants)
        local selected_value
        local values=("$(jq -r  --arg jq_script_index "$script_index" --arg jq_selected_key "$selected_key" '.commands[$jq_script_index|tonumber]|.[$jq_selected_key][]' "$SCRIPTSINDEX".tmp)")
        #echo "$values"
        local OLD_IFS=${IFS};IFS=$'\n'
        select selected_value in ${values[@]};do
          local value_index="$(jq -r --arg jq_script_index "$script_index" --arg jq_selected_key "$selected_key" --arg jq_selected_value "$selected_value"  '[.commands[$jq_script_index|tonumber]|.[$jq_selected_key][] == $jq_selected_value]|index(true)' "$SCRIPTSINDEX".tmp)"
          echo $selected_value selected
          #echo Value Index = "$value_index"
          local new_value=$(get_user_input "Enter new value: ")
          jq --arg jq_script_index "$script_index" --arg jq_selected_key "$selected_key" --arg jq_value_index "$value_index" --arg jq_new_value "$new_value" '.commands[$jq_script_index|tonumber]|.[$jq_selected_key][$jq_value_index|tonumber] = $jq_new_value' "$SCRIPTSINDEX".tmp
          break
        done 
      ;;

      "environment variables"|"output files"|functions)
        local names="$(jq -r --arg jq_script_index "$script_index" --arg jq_selected_key "$selected_key" '.commands[$jq_script_index|tonumber]|.[$jq_selected_key][].name' "$SCRIPTSINDEX".tmp)"  
        #echo "$names"
        local selected_name
        local OLD_IFS=${IFS};IFS=$'\n'
        select selected_name in ${names[@]};do
          local name_index="$(jq -r --arg jq_script_index "$script_index" --arg jq_selected_key "$selected_key" --arg jq_selected_name "$selected_name" '[.commands[$jq_script_index|tonumber]|.[$jq_selected_key][].name == $jq_selected_name]|index(true)' "$SCRIPTSINDEX".tmp)"
          echo $name_index
          local name_default="$(jq -r --arg jq_script_index "$script_index" --arg jq_selected_key "$selected_key" --arg jq_name_index "$name_index" '.commands[$jq_script_index|tonumber]|.[$jq_selected_key][$jq_name_index|tonumber].name' "$SCRIPTSINDEX".tmp)"
          local description_default="$(jq -r --arg jq_script_index "$script_index" --arg jq_selected_key "$selected_key" --arg jq_name_index "$name_index" '.commands[$jq_script_index|tonumber]|.[$jq_selected_key][$jq_name_index|tonumber].description'  "$SCRIPTSINDEX".tmp)"
          local new_name="$(get_user_input_default "Enter New Name: " "$name_default")"
          local new_description="$(get_user_input_default "Enter New Description: " "$description_default")"
          echo New name = "$new_name"
          jq -r --arg jq_script_index "$script_index" --arg jq_selected_key "$selected_key" --arg jq_name_index "$name_index" --arg jq_new_name "$new_name" --arg jq_new_description "$new_description" '(.commands[$jq_script_index|tonumber]|.[$jq_selected_key][$jq_name_index|tonumber].name) = $jq_new_name |(.commands[$jq_script_index|tonumber]|.[$jq_selected_key][$jq_name_index|tonumber].description) = $jq_new_description' "$SCRIPTSINDEX".tmp
          break
        done
      ;;

      logfile)

        local selected_logbook=$(select_logbook)
        jq -r --arg jq_script_index "$script_index" --arg jq_selected_key "$selected_key" --arg jq_selected_logbook "$selected_logbook" '.commands[$jq_script_index|tonumber]|.[$jq_selected_key] = $jq_selected_logbook' "$SCRIPTSINDEX".tmp
      ;;
 
      *)
        echo Not Yet Supprted
        exit 0
      ;;
    esac

    local response
    read -p "Update Another?: [y/n] " response
    case $response in
      y) continue ;;
      n) break ;;
    esac
  done
}



# * Function: show *
show ()  {

# * Arguments: *
#local var="$n"
 

#*Code:
   
  case $1 in

    all)
      jq -r '.commands[]|"\n\u001b[35mName:\n\u001b[37m\(.name)\n\n" + 
"\u001b[35mDescription:\n\u001b[37m\(.description)\n\n" +
"\u001b[35mPlatform:\n\u001b[37m\(.platform)\n\n" +
"\u001b[35mLocality:\n\u001b[37m\(.locality)\n\n" +
"\u001b[35mEnd:\n\u001b[37m\(.end)\n\n" + 
"\u001b[35mEnvironment Variables:\n\u001b[37m\([."environment variables"[].name]|join("\n"))\n\n" +
"\u001b[35mOutput Files:\n\u001b[37m\([."output files"[].name]|join("\n"))\n\n" + 
"\u001b[35mFunctions:\n\u001b[37m\([.functions[].name]|join("\n"))\n\n" + 
"\u001b[35mAssocciated Commands:\n\u001b[37m\([."associated commands"[]]|join("\n"))\n\n" +
"\u001b[35mDependants:\n\u001b[37m\([.dependants[]]|join("\n"))\n\n" +
"\u001b[35mLog file:\n\u001b[37m\(.logfile)\n\n" + 
"\u001b[35mStatus:\n\u001b[37m\(.status)"' "$SCRIPTSINDEX"
    ;;
   
    md)
      jq -r '.commands[]|"# Scripts Index\n\n## Name\n\(.name)\n\n" + 
"### Description\n\(.description)\n\n" +
"### Platform\n\(.platform)\n\n" +
"### Locality\n\(.locality)\n\n" +
"### End\n\(.end)\n\n" + 
"### Environment Variables\n\([."environment variables"[].name]|join(", "))\n\n" +
"### Output Files\n\([."output files"[].name]|join(", "))\n\n" + 
"### Functions\n\([.functions[].name]|join(", "))\n\n" + 
"### Assocciated Commands\n\([."associated commands"[]]|join(", "))\n\n" +
"### Dependants\n\([.dependants[]]|join(", "))\n\n" +
"### Log file\n\(.logfile)\n\n" + 
"### Status\n\(.status)"' "$SCRIPTSINDEX"
    ;;

    *)    
      script_index="$(select-script-from-index)"
      jq -r --arg jq_cmdindex "$script_index" '.commands[$jq_cmdindex|tonumber]|"\n\u001b[35mName:\n\u001b[37m\(.name)\n\n" + 
"\u001b[35mDescription:\n\u001b[37m\(.description)\n\n" +
"\u001b[35mPlatform:\n\u001b[37m\(.platform)\n\n" +
"\u001b[35mLocality:\n\u001b[37m\(.locality)\n\n" +
"\u001b[35mEnd:\n\u001b[37m\(.end)\n\n" + 
"\u001b[35mEnvironment Variables:\n\u001b[37m\([."environment variables"[].name]|join("\n"))\n\n" +
"\u001b[35mOutput Files:\n\u001b[37m\([."output files"[].name]|join("\n"))\n\n" + 
"\u001b[35mFunctions:\n\u001b[37m\([.functions[].name]|join("\n"))\n\n" + 
"\u001b[35mAssocciated Commands:\n\u001b[37m\([."associated commands"[]]|join("\n"))\n\n" +
"\u001b[35mDependants:\n\u001b[37m\([.dependants[]]|join("\n"))\n\n" +
"\u001b[35mLog file:\n\u001b[37m\(.logfile)\n\n" + 
"\u001b[35mStatus:\n\u001b[37m\(.status)"' "$SCRIPTSINDEX"
    ;;
  esac
  

#  jq -r --arg jq_cmdindex "$script_index" '.|"\n\u001b[35mName:\n\u001b[37m\(.commands[$jq_cmdindex|tonumber].name)\n\n" + "\u001b[35mDescription:\n\u001b[37m\(.commands[$jq_cmdindex|tonumber].description)\n\n" + "\u001b[35mPlatform:\n\u001b[37m\(.commands[$jq_cmdindex|tonumber].platform)\n\n" + "\u001b[35mLocality:\n\u001b[37m\(.commands[$jq_cmdindex|tonumber].locality)\n\n"+ "\u001b[35mEnd:\n\u001b[37m\(.commands[$jq_cmdindex|tonumber].end)\n\n" + "\u001b[35mEnvironment Variables:\n\u001b[37m\([.commands[$jq_cmdindex|tonumber]."environment variables"[].name]|join("\n"))\n\n" + "\u001b[35mOutput Files:\n\u001b[37m\([.commands[$jq_cmdindex|tonumber]."output files"[].name]|join("\n"))\n\n" + "\u001b[35mFunctions:\n\u001b[37m\([.commands[$jq_cmdindex|tonumber].functions[].name]|join("\n"))\n\n" + "\u001b[35mAssociated Commands:\n\u001b[37m\([.commands[$jq_cmdindex|tonumber]."associated commands"[]]|join("\n"))\n\n" + "\u001b[35mDependants:\n\u001b[37m\([.commands[$jq_cmdindex|tonumber].dependants[]]|join("\n"))\n\n" + "\u001b[35mLog File:\n\u001b[37m\(.commands[$jq_cmdindex|tonumber]."logfile")\n\n"+ "\u001b[35mStatus:\n\u001b[37m\(.commands[$jq_cmdindex|tonumber].status)\n\n"' "$SCRIPTSINDEX"

}

_list-scripts-on-disk () { 

  local local_dir_list=("$@")
  local scripts_list
  #TODO place in for loop to loop through each dir in the passed dir-list
  for local_dir in ${local_dir_list[@]};do
    if [[ $PLATFORM == darwin ]]; then
      script_list="$(find "$local_dir" -maxdepth 1 -perm +111 -type f)"
    else
      script_list="$(find "$local_dir" -maxdepth 1 -perm /111 -type f)"
    fi
  done

  local script_list_out
 
  while IFS= read -r line;do
    script_list_out+="${line##*/}"$'\n'
  done <<< "$script_list"

  echo "$script_list_out"

}

list-scripts-on-disk () {
  dir_list="$@"
  if [[ $# == 0 ]]; then
    dir_list=$SCRIPTS
  fi

  local scriptsondisk="$(_list-scripts-on-disk "$dir_list")"

  echo "$scriptsondisk"

}

# * Function: list-functions-in-scripts-on-disk *
list-functions-in-a-script-on-disk ()  {

# * Arguments: *
 
  local script="$1"
  local dir="${2:-"$SCRIPTS"}"

#*Code:

  #TODO read a language label
  #TODO move grep.. into a find functions command which will find functions defined in different languages depending on the read in language label 
  local fcn_list="$(grep '()[[:space:]]{' "$script")"
  #TODO complie and alternate function list from the function labels within the script and amalgamate with fcn list, no duplicates
  #echo "$fcn_list"
  #exit 0
  local fcn_list_out

  while IFS= read -r line;do
    #echo "${line::-5}"
    if [[ -z $line ]]; then
      fnc_list_out=""
    else
      fnc_list_out+="${line:0:-5}"$'\n'
    fi
  done <<< "$fcn_list"  

  echo "$fnc_list_out"

}

# * Function auto-add: *
auto-add () {
 #TODO split into two functions auto-add use all scripts in the specified dirs or the default dir which can then be passed to an add function. This allow an add function to add a single/handful of scripts which are manually supplied or the results from auto add 
  local script_list=$(list-scripts-on-disk "$@")
 
  add "$script_list"

}

# * Function: add *
add ()  {

# * Arguments: *
#local var="$n"
 
  local script_list="$1"
  local dir="${2:-$SCRIPTS}"

#*Code:

  local script_list_lines_left="$(echo "$script_list"|wc -l)"
  local script_list_index="$(jq -r '.commands[].name' "$SCRIPTSINDEX")"
  local count=1
  
  if [[ $script_list_lines_left -eq 1 ]] && [[ ! -z $dir/$script_list ]]; then
    echo "Script $script_list is not found in $dir"
    exit
  fi

  local script_name
  while IFS= read -r script_list_line<&3;do
    ((script_list_lines_left=script_list_lines_left-1)) 
    script_name="$script_list_line"
    echo $'\n'"Script Name: \"$script_name\""$'\n'
    echo "$script_list_index"|grep -wq "$script_name"
    if [[ $? -eq 0 ]]; then
       echo " * - The script \"$script_name\" is already in the index, skipping! - * "
       continue
    else
      local script_description="$(get_user_input "Enter Description: ")"
      local end="$(get_user_input "Enter End: ")"
      local platform="$(get_user_input "Enter Platform: ")"
      local locality="$(get_user_input "Enter Locality (Is \"$script_name\" only meant to run on a specific system?): ")" 
      
      local env_var
      while true;do 
        local add_env_var="$(get_user_input "Add Enviroment Variables? [y/n]: ")"
        case $add_env_var in
          y)
          env_var="$(keyed_array "Environment Variable" name description)"
          break
          ;;
          n)
          env_var=''
          break
          ;;
        esac
      done
      #echo $'\n'
      
      local add_out_file
      local output_files
      while true;do 
        add_output_file="$(get_user_input "Add Output Files? [y/n]: ")"
        case $add_output_file in
          y)
          output_files="$(keyed_array "Output Files" name description)"
          break
          ;;
          n)
          output_files=''
          break
          ;;
        esac
      done
      #echo $'\n'
      
      local function_name
      local function_description
      local functions_string
      while IFS= read -r function_list_line<&4;do
        function_name="$function_list_line"
        if [[ -z $function_list_line ]]; then
          echo -e $'\n'" * - No Functions Found in \"$script_name\" - * "$'\n'
          continue
        else 
          echo $'\n'"  Function Found: \"$function_name\""
          function_description="$(get_user_input "  Enter Function Description: ")"
          
          functions_string+="{\"name\" : \""$function_name"\",\"description\" : \""$function_description"\" },"
        fi
      done 4<<< $(list-functions-in-a-script-on-disk "$script_list_line")
    
      if [[ ! -z $functions_string ]]; then
        echo $'\n'* - No Further Functions Found - *$'\n'
        functions_string="[${functions_string:0:-1}]"
        #echo "$functions_string"
      else
        functions_string="[]"
      fi
      
      local add_assoc_cmds
      local command_1
      while true;do 
        add_assoc_cmds="$(get_user_input "Add Associated Commands? [y/n] :")"
        case $add_assoc_cmds in
          y)
          command_1="$(keyless_array "Enter Associated Command: ")"
          break
          ;;
          n)
          command_1=''
          break
          ;;
        esac
      done
      #echo $'\n'
      
      local add_dependants
      local dependant_1
      while true;do
        add_dependants="$(get_user_input "Add Dependants? [y/n] :")"
        case $add_dependants in
          y)
          dependant_1="$(keyless_array "Enter Dependant: ")"
          break
          ;;
          n)
          dependant_1=''
          break
        esac
      done  
      #echo $'\n'
      
      echo $'\n'"Enter Logbook"$'\n'"Select..."
      local logfile="$(select_logbook)"
      echo " " 
      local command_status="$(get_user_input "Enter Status: ")"
      
      #json_string - deliberately global 
      json_string+="{\"name\" : \""$script_name"\",\"description\" : \""$script_description"\", \"end\" : \""$end"\", \"platform\" : \""$platform"\", \"locality\" : \""$locality"\", \"environment variables\" : ["$env_var"], \"output files\" : ["$output_files"], \"functions\" : "$functions_string", \"associated commands\" : ["$command_1"], \"dependants\" : ["$dependant_1"], \"logfile\" : \""$logfile"\", \"status\" : \""$command_status"\"},"
  
      #echo "$json_string"
  
      unset functions_string
      #((count=count+1))
  
      if [[ $count == 5 ]];then
        break
      fi
    fi
  
    echo " "
    if [[ $script_list_lines_left > 0 ]];then
      local add_another
      while true;do
        add_another="$(get_user_input "\""$script_name"\" added. Add another? [y/n]: ")" 
        case $add_another in
          y) continue 2 ;;
          n) break 2 ;;
        esac
      done
    fi
  done 3<<< $script_list
  
  json_string="[${json_string:0:-1}]"

  cp "$SCRIPTSINDEX" "$SCRIPTSINDEX".tmp
  jq -r --argjson jq_json_string "$json_string" '.commands += $jq_json_string' "$SCRIPTSINDEX".tmp 

}

# * Function: delete *
delete ()  {

# * Arguments: *
 

#*Code:

  script_index="$(select-script-from-index)"

  jq --arg jq_script_index "$script_index" 'del(.commands[$jq_script_index|tonumber])' $SCRIPTSINDEX

}

############################## Main Command  #############################

subcommand="${1-usage}"
shift 2>/dev/null

if [ -z "$subcommand" ]; then
    usage
    exit 1
fi

commands () {
    echo ${commands[@]}
}

declare -a commands=(foo commands auto-add add update show list-scripts-on-disk list-functions-in-a-script-on-disk delete)

for i in ${commands[@]}; do
    if [[ "$i" == "$subcommand" ]]; then
        "$subcommand" "$@"
        exit 0
    fi
done

######################### Tab Completion Context ########################

# remember COMP_LINE is changed by shift
if [ -n "$COMP_LINE" ]; then
    for cmd in ${commands[@]}; do 
        [[ "${cmd:0:${#1}}" == "$1" ]] && echo $cmd
    done
    exit 0
fi


## set up auto complate by running 'complete -C ./example ./example'

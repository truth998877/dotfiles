#!/bin/bash

#a limited bash interface to inkscape


activate () {

xdotool search --class Inkscape windowactivate %@ > /dev/null 2>&1

}

presskey () {

  local key="$@"
  xdotool search --class Inkscape key --window %@ "$key" > /dev/null 2>&1

}

holdkey () {

  local key="$@"

  xdotool search --class Inkscape keydown --window %2 "$key"

}

p () {

#  activate

  presskey ctrl+v

}

paste-style () {

  #paste style

  presskey ctrl+Shift+v

}

quit () {

 exit

}

e () {

 presskey e

}

r () {

 presskey r

}

pen () {

 presskey p

}

u () {

 presskey ctrl+z

}

re () {

  presskey Shift+ctrl+z

}

s () {

  presskey s

}

y () {

 presskey ctrl+c

}

t () {

  presskey Tab

}

c () {

  presskey ctrl+x

}

circle () {


xclip -selection c -target 'image/x-inkscape-svg' ~/svg/circle.svg
p

}

centre () {
  #TODO not working
  presskey ctrl+Alt_L+84

}

graphpaper () {

  #TODO needs the ability to be called from other functions with arguments to return just the svgstring
  
  local -i x  
  local -i y
  local -i width
  local -i height

  read -p 'x y> ' x y  
  
  x10=$(( $x * 10 ))
  y10=$(( $y * 10 ))
  width=$(( $x10 + 0 ))
  height=$(( $y10 + 0 ))
  
  local svgstring="$(snip Graph-paper.snip "$x10" "$y10" "$width" "$height")"

  #xclip -selection c -target 'image/x-inkscape-svg' ~/svg/Graph-paper.svg
  echo "$svgstring" | xclip -selection c -target 'image/x-inkscape-svg'
  p
  centre

}

draw-graph () {

  echo "To draw a graph"

  local -i x
  local -i y
  local -i width
  local -i height
  local -i xaxisstart=10
  local -i yaxisfinish=10
  local xaxisselection
  local yaxisselection
  local -i xaxisvposition
  local -i yaxishposition

  read -p 'set number squares, x y> ' x y

  x10=$(( $x * 10 ))
  y10=$(( $y * 10 ))
  width=$(( $x10 + 0 ))
  height=$(( $y10 + 0 ))
  
  local -i xaxisfinish=$(( $width - 10 ))
  local -i yaxisstart=$(( $height - 10 ))

  read -p 'x-axis position, bottom or middle> ' xaxisselection
  read -p 'y-axis position, left or middle> ' yaxisselection
  
  echo $xaxisselection
  echo $yaxisselection

  xaxisvposition=$(( $height / 2 ))
  if [[ $xaxisselection == "bottom" ]]; then
    xaxisvposition=$(( $height - 20 ))
  fi
  echo "$xaxisvposition"

  yaxishposition=$(( $width / 2 ))
  if [[ $yaxisselection == "left" ]]; then
    yaxishposition=20
  fi
  echo "$yaxishposition"
    
  local svgstring="$(snip Graph-paper-1.snip  "$x10" "$y10" "$width" "$height" "$xaxisstart" "$xaxisfinish" "$yaxisstart" "$yaxisfinish" "$xaxisvposition" "$yaxishposition")"

  echo "$svgstring" | xclip -selection c -target 'image/x-inkscape-svg' 
  p
  centre
    


}

style () {
#TODO load svg style string from file, make substitutions a-la Rob's snip tool
#TODO style creation function
xclip -selection c -target 'image/x-inkscape-svg' ~/svg/style.svg
presskey ctrl+Shift+v 

}

#TODO instead of having a function for each object, create a add-object function whose argument is the filename of the object to copy
#TODO objects to add - square, rectangle, eclipse, triangles, polygons, arcs, up down left right diagonal arched single and double ended arrows, xy graph no grid, xy graph with grid, xyz graph, 
#graph paper

while read -p '> ' line;do
  #if line is a single character
 "$line"
  #if line is more than one character
  #probably apply-style
done < "${1:-/dev/stdin}"

#!/bin/bash

foo () {
  local first=$1
  echo "Would foo with $first."
}

start () {

# echo "To stream to twitch and record a new video and save it in the correct directory" 
  
  local account="$1"

  case "$account" in
  
    fortiesgamer)

     local profile="fortiesgamer"
     local collection="fortiesgamer"
     local selectedgame="$(selectagame)"
     local capturedir=$(capturedir "$selectedgame")
     checkdisc "$selectedgame"
      
     sensoroverlay
     timeoverlay
     sceneoverlay
     twitch overlay
      
     obsrecord "$collection" "$profile" "$capturedir"
     sleep 5   

#     streamingstatus=$(obs-cli StartStreaming | jq -r '.[].status')
     echo "Streaming Status - $streamingstatus"

     record play "$selectedgame"   
     sleep 2
     
     tmuxlivegaming

    ;;

    studywithtony)
    #TODO make this the same as record, only add the obs streaming command 18/5
      #echo "studywithtony" > currentstream
    
      obs \
        --mininze-to-tray \
        --collection "studywithtony twitch" \
        --scene "Intermission" \
        --profile "studywithtony" \
          &>/dev/null &     
 
      sleep 5   

      recdir="/home/tony/GameCaptures/livestudy/$(datepath)"
 
      if [ ! -d "$recdir" ]; then
        mkdir -p "$recdir"
      fi
      
      local setrecdir="SetRecordingFolder="\'"{\"rec-folder\": \"/"$recdir"/\" }"\'
      echo "$setrecdir" |xargs obs-cli | jq -r '.[].status'

      recordingstatus=$(obs-cli StartRecording | jq -r '.[].status')
      echo Recording Status: "$recordingstatus"
      #streamingstatus=$(obs-cli StartStreaming | jq -r '.[].status')
      #echo Streaming Status: "$streamingstatus"
      
#      markcreatefile create "$recdir"

      sleep 3
      markerscreatefile create
      tmuxlivestudy

    
    ;;
 
    *)

      echo "specified stream channel not recognised"
      exit 1

    ;;

  esac

}

stop () {

  echo "To gracfully switch streaming off and exit obs"
  

  obs-cli StopStreaming
  obs-cli StopRecording

  twitch killoverlay

  killall obs

}

############################## Main Command  #############################

subcommand="${1-usage}"
shift 2>/dev/null

if [ -z "$subcommand" ]; then
    usage
    exit 1
fi

commands () {
    echo ${commands[@]}
}

declare -a commands=(foo commands start stop)

for i in ${commands[@]}; do
    if [[ "$i" == "$subcommand" ]]; then
        "$subcommand" "$@"
        exit 0
    fi
done

######################### Tab Completion Context ########################

# remember COMP_LINE is changed by shift
if [ -n "$COMP_LINE" ]; then
    for cmd in ${commands[@]}; do 
        [[ "${cmd:0:${#1}}" == "$1" ]] && echo $cmd
    done
    exit 0
fi


## set up auto complate by running 'complete -C ./example ./example'

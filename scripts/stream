#!/bin/bash

foo () {
  local first=$1
  echo "Would foo with $first."
}

start () {

  local account="$1"
  local game="$2"

  local gamename=$(lutrisgameindex $game)

#TODO set options for obs command line to stream to different accounts, fortiesgamer, studywithtony, etc

#TODO obs command line option

  #echo "To switch obs on with correct setting to stream to various accounts"

  case "$account" in
  
    fortiesgamer)

      #TODO check that $game is set else exit          
    
      #set currentstream for twitch api and weechat
      #echo "fortiesgamer" > currentstream
    
      obs \
        --minimize-to-tray \
        --collection "fortiesgamer twitch" \
        --profile "fortiesgamer" \
         &>/dev/null &

      sleep 5   

      #obs-cli SetRecordingFolder "/home/tony/GameCaptures/$game"
      #obs-cli StartRecording
      #obs-cli StartStreaming

      twitch overlay
      #twitcheventcheck osd
      lutris lutris:rungame/"$gamename" &>/dev/null & 

      tmuxlivegaming

    ;;

    studywithtony)
    #TODO make this the same as record, only add the obs streaming command 18/5
      #echo "studywithtony" > currentstream
    
      obs \
        --mininze-to-tray \
        --collection "studywithtony twitch" \
        --profile "studywithtony" \
          &>/dev/null &     
 
      sleep 5   

      recdir="/home/tony/GameCaptures/livestudy/$(datepath)"
 
      if [ ! -d "$recdir" ]; then
        mkdir -p "$recdir"
      fi
      

      #obs-cli SetRecordingFolder "$recdir"
      #obs-cli StartRecording
      #obs-cli StartStreaming
 
      #obs \
      # --startstreaming \
      # --startrecording \
      
      tmuxlivestudy

      markcreatefile create "$recdir"
    
    ;;
 
    *)

      echo "specified stream channel not recognised"
      exit 1

    ;;

  esac

}

stop () {

  echo "To gracfully switch streaming off and exit obs"
  

  obs-cli StopStreaming
  obs-cli StopRecording

  twitch killoverlay

  killall obs

}

############################## Main Command  #############################

subcommand="${1-usage}"
shift 2>/dev/null

if [ -z "$subcommand" ]; then
    usage
    exit 1
fi

commands () {
    echo ${commands[@]}
}

declare -a commands=(foo commands start stop)

for i in ${commands[@]}; do
    if [[ "$i" == "$subcommand" ]]; then
        "$subcommand" "$@"
        exit 0
    fi
done

######################### Tab Completion Context ########################

# remember COMP_LINE is changed by shift
if [ -n "$COMP_LINE" ]; then
    for cmd in ${commands[@]}; do 
        [[ "${cmd:0:${#1}}" == "$1" ]] && echo $cmd
    done
    exit 0
fi


## set up auto complate by running 'complete -C ./example ./example'

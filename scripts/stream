#!/bin/bash

foo () {
  local first=$1
  echo "Would foo with $first."
}

stream_ () {

   local streamingstatus=$(obs-cli StartStreaming | jq -r '.[].status')
   echo "Streaming Status - $streamingstatus"

}

start () {

# echo "To stream to twitch and record a new video and save it in the correct directory" 
  
  local account="$1"

  case "$account" in
  
    fortiesgamer)

      #echo "fortiesgamer" > currentstream

      local profile="fortiesgamer"
      local collection="fortiesgamer"
      local selectedgame="$(selectagame)"
      local capturedir=$(capturedir "$selectedgame")
      checkdisc "$selectedgame"
      
      sensoroverlay
      timeoverlay
      sceneoverlay
      twitch overlay
      
      obsrecord "$collection" "$profile" "$capturedir"
      sleep 5   
     
      stream_
 
      record play "$selectedgame"   
      sleep 2
     
      tmuxlivegaming

    ;;

    studywithtony)

      local profile="studywithtony"
      local collection="studywithtony"
      local capturedir="livestudy/$(datepath)"
      echo $capturedir
      
      if [[ ! -d "/home/tony/GameCaptures/$capturedir" ]]; then
        mkdir -p "/home/tony/GameCaptures/$capturedir"
      fi 
    
      obsrecord "$collection" "$profile" "$capturedir"
      sleep 5   

      stream_    
      sleep 3

      markerscreatefile create
      sleep 5
      
      tmuxstreamstudy
    
    ;;
 
    *)

      echo "Specified stream channel not recognised"
    ;;

  esac

}

stop () {

#TODO needs sorting

  echo "To gracfully switch streaming off and exit obs"
  

  obs-cli StopStreaming
  obs-cli StopRecording

  twitch killoverlay

#  killall obs

}

############################## Main Command  #############################

subcommand="${1-usage}"
shift 2>/dev/null

if [ -z "$subcommand" ]; then
    usage
    exit 1
fi

commands () {
    echo ${commands[@]}
}

declare -a commands=(foo commands start stop)

for i in ${commands[@]}; do
    if [[ "$i" == "$subcommand" ]]; then
        "$subcommand" "$@"
        exit 0
    fi
done

######################### Tab Completion Context ########################

# remember COMP_LINE is changed by shift
if [ -n "$COMP_LINE" ]; then
    for cmd in ${commands[@]}; do 
        [[ "${cmd:0:${#1}}" == "$1" ]] && echo $cmd
    done
    exit 0
fi


## set up auto complate by running 'complete -C ./example ./example'

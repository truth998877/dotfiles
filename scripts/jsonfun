#!/bin/bash

#should this be called shouldbefun??

foo () {
  local first=$1
  echo "Would foo with $first."
}

backup () {
#not tested
    
  local jsonfile="$1"
  cp "$jsonfile" "${jsonfile%.*}-$(date -u "+%F_%T").json.bak"

}

restore () {
#not tested

  local jsonfile="$1"
  cp "$jsonfile.bak" "$jsonfile"

}

addvideoid () {

  local jsonfile="$1"
  local title="$2"
  local video_id="$3"

  backup "$jsonfile"

  cp "$jsonfile" "$jsonfile.tmp"
  local index=$(jq --arg title "$title" '.|map(.title==$title)|index(true)' "$jsonfile.tmp")
  #echo "shouldbe index value = $index"
  jq --argjson index $index --arg video_id "$video_id" '.[$index] += {video_id: $video_id}' "$jsonfile.tmp" > $jsonfile
  rm "$jsonfile.tmp"
  echo "$index"

}

fileappend () {

  local jsonfile="$1"
  local jsonobject="$2"

  backup "$jsonfile"

  cp "$jsonfile" "$jsonfile".tmp
  jq --argjson jsonobject "$jsonobject" '.+ [$jsonobject]' "$jsonfile".tmp >"$jsonfile"
  rm "$jsonfile".tmp
   
}

fileremove () {
#not tested, but don't use, use setdeleted insteadt

  local jsonfile="$1"
  local video_id="$2"

  backup "$jsonfile"
  
  cp "$jsonfile" "$jsonfile".tmp
  local index=$(jq --arg video_id "$video_id" '.|map(.video_id==$video_id|index(true))' "$jsonfile.tmp")
  jq --argjson index "$index" 'del(.[$index])' "$jsonfile".tmp > "$jsonfile" 
  rm "$jsonfile".tmp

}

setdeleted () {

  local jsonfile="$1"
  local video_id ="$2"
  
  backup "$jsonfile"

  echo "To set deleted in shouldbe to true"
  cp "$jsonfile" "$jsonfile".tmp  
  local index=$(jq --arg video_id "$video_id" '.|map(.video_id==$video_id|index(true))' "$jsonfile.tmp")
  jq --argjson index "$index" '.[$index].deleted = true' "$jsonfile".tmp > $jsonfile
  rm "$jsonfile".tmp
 
}

setpublished () {

  local jsonfile="$1"
  local video_id="$2"

  backup "$jsonfile"

  cp "$jsonfile" "$jsonfile.tmp"
  local index=$(jq --arg video_id "$video_id" '.|map(.video_id==$video_id)|index(true)' "$jsonfile.tmp")
  jq -r --argjson index $index '.[$index].published = true' "$jsonfile.tmp" > $jsonfile
  rm "$jsonfile.tmp"

}

setready2publish () { 

  local jsonfile="$1"
  local video_id="$2"
  
  backup "$jsonfile"

  cp "$jsonfile" "$jsonfile.tmp"
  local index=$(jq --arg video_id "$video_id" '.|map(.video_id==$video_id)|index(true)' "$jsonfile.tmp")
  echo "$index"
  jq -r --argjson index $index '.[$index].ready2publish = true' "$jsonfile.tmp" > $jsonfile
  rm "$jsonfile.tmp"

}

setpromoted () {

  local jsonfile="$1" 
  local index="$2"
  
  backup "$jsonfile"

  cp "$jsonfile" "$jsonfile.tmp"
  jq -r --argjson index $index '.[$index].promoted=true' "$jsonfile.tmp" > "$jsonfile"
  rm "$jsonfile.tmp"

}

setpublish2blog () {

  local jsonfile="$1"
  local index="$2"
  
  backup "$jsonfile"
  
  cp "$jsonfile" "$jsonfile.tmp"
  jq -r --argjson index $index '.[$index].published2blog = true' "$jsonfile.tmp" > $jsonfile
  rm "$jsonfile.tmp"

}

createytjsonobject () { 

#create json object to update shouldbe for the newly created video
 
   local title="$1"
   local tags="$2"
   local description="$3"
   local thumbnail="$4"
   local category="$5"
   local game="$6"
   
   local now="$(date +%s)"
 
   local privacy="private"
 
   #echo "To create json object for each new video using jq with title, description, tags, a dummy id and a private privacy status" 
 
   jq -n --arg title "$title" \
      --arg tags "$tags" \
      --arg description "$description" \
      --arg thumbnail "$thumbnail" \
      --arg privacy "$privacy" \
      --arg game "$game" \
      --arg category "$category" \
      --arg now "$now" \
      '{game: $game, title: $title, description: $description, tags: [$tags], thumbnail: $thumbnail, privacy: $privacy, category: $category, "ready2publish": false, "published": false, "promoted": false, "published2blog": false, "added": $now, "modded": $now, "deleted": false}'

}


############################## Main Command  #############################

subcommand="${1-usage}"
shift 2>/dev/null

if [ -z "$subcommand" ]; then
    usage
    exit 1
fi

commands () {
    echo ${commands[@]}
}

declare -a commands=(foo commands fileappend createytjsonobject fileremove setdeleted backup restore setpublished addvideoid setready2publish setpromoted)

for i in ${commands[@]}; do
    if [[ "$i" == "$subcommand" ]]; then
        "$subcommand" "$@"
        exit 0
    fi
done

######################### Tab Completion Context ########################

# remember COMP_LINE is changed by shift
if [ -n "$COMP_LINE" ]; then
    for cmd in ${commands[@]}; do 
        [[ "${cmd:0:${#1}}" == "$1" ]] && echo $cmd
    done
    exit 0
fi


## set up auto complate by running 'complete -C ./example ./example'

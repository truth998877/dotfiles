#!/bin/bash

foo () {
  local first=$1
  echo "Would foo with $first."
}

start () { 
  
 # echo "To record a new video and save in the correct directory"
  local account="$1"
 
  case "$account" in
 
    fortiesgamer)

      #TODO -----needed for record and stream, so this needs to be in its own function------------------------------------------------------------

      selectedgame="$(selectagame)"
      checkdisc "$selectedgame"
      capturedir "$slectedgame"

      exit
      
      #move this line to its own function as this task needs to be performed by other functions  
      local capturedir="$(jq --arg selectedgame "$selectedgame" -r '.directory[]."'$selectedgame'"' ~/GameCaptures/gamecapturedirectories.json)"

          if [[ $capturedir == "null" ]]; then 
            read -p "New Game? (y/n)" response
              if [[ $response == "y" ]]; then
               #echo blah
               capturedir=$(gamecaptures new-game "$selectedgame")
               #echo $capturedir

               #TODO disc details need to be captured here
                
              elif [ "$response" == "n" ]; then
                local OLD_IFS=${IFS};IFS=$'\n'
                local array=("$(find ~/GameCaptures/ -maxdepth 1 -type d -printf '%f\n')") 
                select item in ${array[@]};do
                  capturedir="$item"
                  IFS="${OLD_IFS}"
                  break
                done    
              fi
         fi

     #--------------------------------------------------------------------------------------------------------------------------------------------

      sensoroverlay
      timeoverlay
      sceneoverlay
 
    #TODO -----obs initialisation needs to be in its own function----------------------------------------------------------------------------------
      obs \
        --minimize-to-tray \
        --collection "fortiesgamer record only" \
        --profile "fortiesgamer" \
         &>/dev/null &
 
      sleep 5

      obs-cli SetCurrentScene='{"scene-name" : "Intermission"}'
      sleep 2
    
      # example   local recordingfolderstring = "'{ "rec-folder":"/home/tony/GameCaptures/$capturedir"}'"
      local recdir="SetRecordingFolder="\'"{\"rec-folder\": \"/"home/tony/GameCaptures/$capturedir"/\" }"\'
      echo "$recdir" |xargs obs-cli | jq -r '.[].status'
      recordingstatus=$(obs-cli StartRecording | jq -r '.[].status')
      echo "Recording Status $recordingstatus"
     #---------------------------------------------------------------------------------------------------------------------------------------------
     
     #TODO ---------needs to be own function------------------------------------------------
      lutris lutris:rungame/"$selectedgame" &>/dev/null &
     #--------------------------------------------------------------------------------------
  ;;

  studywithtony)
 
   #    echo "studywithtony" > currentchannel
 
       obs \
         --mininze-to-tray \
         --collection "studywithtony twitch" \
         --profile "studywithtony" \
           &>/dev/null &
 
       sleep 5
 
       local recdir="/home/tony/GameCaptures/livestudy/$(datepath)"
 
       if [ ! -d "$recdir" ]; then
         mkdir -p "$recdir"
       fi

       #obs-cli SetRecordingFolder "$recdir"
       #obs-cli StartRecording

       #local setrecdir="SetRecordingFolder="\'"{\"rec-folder\": \"/"home/tony/GameCaptures/livestudy/$(datepath)"/\" }"\'
       local setrecdir="SetRecordingFolder="\'"{\"rec-folder\": \"/"$recdir"/\" }"\'
       echo "$setrecdir" |xargs obs-cli | jq -r '.[].status'

       recordingstatus=$(obs-cli StartRecording | jq -r '.[].status')
       echo "$recordingstatus"
  
       tmuxin

       #markcreatefile create 
  
   ;;

  *)

    echo "Whaaat?"
  ;;
esac

}

stop () {

  echo "To stop recording"
  #TODO current stream
  #obs-cli StopRecording
  markfinish
}


############################## Main Command  #############################

subcommand="${1-usage}"
shift 2>/dev/null

if [ -z "$subcommand" ]; then
    usage
    exit 1
fi

commands () {
    echo ${commands[@]}
}

declare -a commands=(foo commands start stop)

for i in ${commands[@]}; do
    if [[ "$i" == "$subcommand" ]]; then
        "$subcommand" "$@"
        exit 0
    fi
done

######################### Tab Completion Context ########################

# remember COMP_LINE is changed by shift
if [ -n "$COMP_LINE" ]; then
    for cmd in ${commands[@]}; do 
        [[ "${cmd:0:${#1}}" == "$1" ]] && echo $cmd
    done
    exit 0
fi


## set up auto complate by running 'complete -C ./example ./example'

#!/bin/bash

foo () {
  local first=$1
  echo "Would foo with $first."
}

play () {

local selectedgame="$1"

  echo "Launching selected game, $selectedgame..." 
  lutris lutris:rungame/"$selectedgame" &>/dev/null &

}


start () { 
  
 # echo "To record a new video and save in the correct directory"

  local account="$1"
 
  case "$account" in
 
    fortiesgamer)

      local profile="fortiesgamer"
      local collection="fortiesgamer"
      local selectedgame="$(selectagame)"
      local capturedir=$(capturedir "$selectedgame")
      checkdisc "$selectedgame"

      sensoroverlay
      timeoverlay
      sceneoverlay
      
      obsrecord "$collection" "$profile" "$capturedir"
 
      play "$selectedgame"    
  ;;

  studywithtony)

  #TODO bring in line with new functions
 
   #    echo "studywithtony" > currentchannel
 
       obs \
         --mininze-to-tray \
         --collection "studywithtony twitch" \
         --profile "studywithtony" \
           &>/dev/null &
 
       sleep 5
 
       local recdir="/home/tony/GameCaptures/livestudy/$(datepath)"
 
       if [ ! -d "$recdir" ]; then
         mkdir -p "$recdir"
       fi

       #obs-cli SetRecordingFolder "$recdir"
       #obs-cli StartRecording

       #local setrecdir="SetRecordingFolder="\'"{\"rec-folder\": \"/"home/tony/GameCaptures/livestudy/$(datepath)"/\" }"\'
       local setrecdir="SetRecordingFolder="\'"{\"rec-folder\": \"/"$recdir"/\" }"\'
       echo "$setrecdir" |xargs obs-cli | jq -r '.[].status'

       recordingstatus=$(obs-cli StartRecording | jq -r '.[].status')
       echo "$recordingstatus"
  
       tmuxin

       #markcreatefile create 
  
   ;;

  *)

    echo "Whaaat?"
  ;;
esac

}

stop () {

#TODO 

  echo "To stop recording"
  #TODO current stream
  #obs-cli StopRecording
  markfinish
}


############################## Main Command  #############################

subcommand="${1-usage}"
shift 2>/dev/null

if [ -z "$subcommand" ]; then
    usage
    exit 1
fi

commands () {
    echo ${commands[@]}
}

declare -a commands=(foo commands start stop play)

for i in ${commands[@]}; do
    if [[ "$i" == "$subcommand" ]]; then
        "$subcommand" "$@"
        exit 0
    fi
done

######################### Tab Completion Context ########################

# remember COMP_LINE is changed by shift
if [ -n "$COMP_LINE" ]; then
    for cmd in ${commands[@]}; do 
        [[ "${cmd:0:${#1}}" == "$1" ]] && echo $cmd
    done
    exit 0
fi


## set up auto complate by running 'complete -C ./example ./example'

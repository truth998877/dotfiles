#!/usr/local/bin/bash

_normal-settings () {

declare -gA colours; colours=( [1]=\"dark-red\" [2]=\"red\" [3]=\"orange\" [4]=\"yellow\" [5]=\"light-green\" [6]=\"green\" [7]=\"light-blue\" [8]=\"blue\" [9]=\"dark-blue\" [10]=\"purple\" [11]=\"grey\" [12]=\"black\" )

declare -A markers=( [1]=\"A\" [2]=\"B\" [3]=\"C\" [4]=\"D\" [5]=\"E\" [6]=\"F\" [7]=\"G\" [8]=\"H\" [9]=\"I\" [10]=\"J\" [11]=\"K\" [12]=\"L\" )


titlefontsize=20
labelfontsize=12
keyfontsize="$labelfontsize"

linewidth=2

}

_default-settings () {

declare -gA colours; colours=( [12]=\"dark-red\" [11]=\"red\" [10]=\"orange\" [9]=\"yellow\" [8]=\"light-green\" [7]=\"green\" [6]=\"light-blue\" [5]=\"blue\" [4]=\"dark-blue\" [3]=\"purple\" [2]=\"grey\" [1]=\"black\" )

declare -gA markers=( [1]=\"A\" [2]=\"B\" [3]=\"C\" [4]=\"D\" [5]=\"E\" [6]=\"F\" [7]=\"G\" [8]=\"H\" [9]=\"I\" [10]=\"J\" [11]=\"K\" [12]=\"L\" )


titlefontsize=20
labelfontsize=12
keyfontsize="$labelfontsize"

linewidth=2

}

_set-chosen-settings () {

  local settings="$1"

  case $settings in
    normal)
      _normal-settings
    ;;
    default)
      _default-settings
    ;;
    *)
      _normal-settings
    ;;
  esac

}

foo () {
  local first=$1
  echo "Would foo with $first."

}

_csv2space () {

  local datain="$1"

  local dataout="${datain//,/\ }"
  echo "$dataout"

}

_setsettingsstr () {

  local xlabel="$1"
  local ylabel="$2"
  local title="$3"
  local ycolumns="$4"
  
  local settingsstr="set autoscale"$'\n'"set xlabel \"$xlabel\" font \","$labelfontsize"\""$'\n'"set ylabel \"$ylabel\" font \","$labelfontsize"\""$'\n'"set title \"$title\" font \","$titlefontsize"\""$'\n'"set key left box font \","$keyfontsize"\""$'\n'

  local settingsstr2="set linetype 1 lc rgb ${colours[1]} lw "$linewidth" pt 1"
  local i 
  for ((i=2; i<=ycolumns; i++));do
    settingsstr2="$settingsstr2"$'\n'"set linetype "$i" lc rgb ${colours["$i"]} lw $linewidth pt $i"
  done

  echo "$settingsstr"$'\n'"$settingsstr2"

}

_data2ssv () {

  local data="$1"
  local datatype="$2"

  #datatype
  case $datatype in
    csv)
      data="$(_csv2space "$data")"
    ;;

    space)
    ;;

    *)
      echo datatype: $datatype unrecognised
      exit
    ;;
  esac

echo "$data"

}

_setgnuplotstr () {

 local settingsstr="$1"
 local plotstr="$2"
 local datastr="$3"

 echo "$settingsstr"$'\n'"$plotstr $datastr"

}

_gnuplot () {

  local gnuplotstr="$1"

  _save_last "$gnuplotstr"

  gnuplot -p <<- EOF
    $gnuplotstr
EOF

}

_save_last () {

  gnuplotstr="$1"

  if [[ ! -d "$HOME/last_gnuplot" ]];then
    mkdir "$HOME/last_gnuplot"
  fi

  echo "$gnuplotstr" > "$HOME/last_gnuplot/lastgnuplot"

}

show-previous () {

  echo "$(<~/last_gnuplot/lastgnuplot)"


}

xy-1x-ny () {

#echo "Number of aruguments is $#"

#xy, x aligned data, single plot, multiple lines, data in columns, x data in first column, y data in subsequent columns

#$1 data
#$2 data type: space, csv
#$2 title
#$3 xlabel
#$4 ylabel

#  local terminal="$1"
#  local output="$2"
#  local data="$(<"$1")"
  
  #data must be in columns, x data in column 1,y data in subsequent columns
  local data="$1"
  local datatype="$2" 
  local title="$3"
  local xlabel="$4"
  local ylabel="$5"
  local lines="$6"
  local chosensettings="${7:-normal}"

  local data="$(_data2ssv "$data" "$datatype")"

  #plotstr and datastr - will be different for each
  local datac="${data#*$'\n'}"
  datac="${datac%%$'\n'*}"
  local datac2="${datac//[[:blank:]]/}"
  local a="${#datac}"
  local b="${#datac2}"
  local ycolumns="$((a-b))"
  
  local plotstr1="plot '-' using 1:2 with linespoints"
  if [[ "$lines" == "nolines" ]];then  
    plotstr1="plot '-' using 1:2"
  fi
  local datastr1="$data"$'\n'"e"$'\n'
  local plotstr2=""
  local datastr2=""

  if [[ y-columns > 2 ]];then
    local i
    for ((i=2; i<=ycolumns; i++));do
        if [[ "$lines" == "nolines" ]];then  
          plotstr2="$plotstr2, '' using 1:"$((i+1))""
        else  
          plotstr2="$plotstr2, '' using 1:"$((i+1))" with linespoints"
        fi
        datastr2="$datastr2""$data"$'\n'"e"$'\n'
    done
  fi

  local plotstr="$plotstr1$plotstr2"$'\n'
  local datastr="$datastr1$datastr2"
  
  _set-chosen-settings "$chosensettings"
  local settingsstr="$(_setsettingsstr "$xlabel" "$ylabel" "$title" "$ycolumns")"
  
  local gnuplotstr="$(_setgnuplotstr "$settingsstr" "$plotstr" "$datastr")"
  
  #echo "$gnuplotstr"
  #return
  
  #pass gnuplotstr to gnuplot
  _gnuplot "$gnuplotstr"

}

xy-mx-ny () {

#xy, x non aligned data, single plot, multiple lines, data in columns, x data in odd columns, y data in even columns

#$1 data
#$2 data type: space, csv
#$2 title
#$3 xlabel
#$4 ylabel

#  local terminal="$1"
#  local output="$2"
#  local data="$(<"$1")"
  
  #data must be in columns, x1, y1, x2, y2 etc
  local data="$1"
  local datatype="$2" 
  local title="$3"
  local xlabel="$4"
  local ylabel="$5"
  local lines="$6"
  local chosensettings="${7:-normal}"
  
  #plotstr and datastr - will be different for each
  local datac="${data#*$'\n'}"
  datac="${datac%%$'\n'*}"
  local datac2="${datac//[[:blank:]]/}"
  local a="${#datac}"
  local b="${#datac2}"
  local ycolumns=$((a-b+1))  #number of series
 
  local plotstr1="plot '-' using 1:2 with linespoints"
  if [[ "$lines" == "nolines" ]];then  
    plotstr1="plot '-' using 1:2"
  fi
  local datastr1="$data"$'\n'"e"$'\n'
  local plotstr2=""
  local datastr2=""

  if [[ y-columns > 2 ]];then
    local i
    for ((i=3; i<=ycolumns; i+=2));do
        if [[ "$lines" == "nolines" ]];then  
          plotstr2="$plotstr2, '' using "$i":"$((i+1))""
        else  
          plotstr2="$plotstr2, '' using "$i":"$((i+1))" with linespoints"
        fi
        datastr2="$datastr2""$data"$'\n'"e"$'\n'
    done
  fi

  local plotstr="$plotstr1$plotstr2"$'\n'
  local datastr="$datastr1$datastr2"

  _set-chosen-settings "$chosensettings"
  local settingsstr="$(_setsettingsstr "$xlabel" "$ylabel" "$title" "$ycolumns")"
  
  local gnuplotstr="$(_setgnuplotstr "$settingsstr" "$plotstr" "$datastr")"
  
  #echo "$gnuplotstr"
  #return
  
  #pass gnuplotstr to gnuplot
  _gnuplot "$gnuplotstr"
}

############################## Main Command  #############################

subcommand="${1-usage}"
shift 2>/dev/null

if [ -z "$subcommand" ]; then
    usage
    exit 1
fi

commands () {
    echo ${commands[@]}
}

declare -a commands=(foo commands xy-1x-ny xy-mx-ny show-previous)

for i in ${commands[@]}; do
    if [[ "$i" == "$subcommand" ]]; then
        "$subcommand" "$@"
        exit 0
    fi
done

######################### Tab Completion Context ########################

# remember COMP_LINE is changed by shift
if [ -n "$COMP_LINE" ]; then
    for cmd in ${commands[@]}; do 
        [[ "${cmd:0:${#1}}" == "$1" ]] && echo $cmd
    done
    exit 0
fi


## set up auto complate by running 'complete -C ./example ./example'

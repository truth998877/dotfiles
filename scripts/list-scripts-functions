#!/usr/local/bin/bash

#is_script_in_index () {
#   local script_list="$1"
#   local script="$1"
 
#   echo 

echo_scripts_and_functions () {


local script_list=$(list-scripts)

while IFS= read -r script_list_line;do
  echo $'\n'"$script_list_line"
    while IFS= read -r function_list_line;do
      echo -e "   $function_list_line"
    done <<< $(list-functions "$script_list_line")
done <<< $script_list

}

get_user_input () {

  local prompt="$1"
  local response

  while [[ $response  == '' ]];do
    read -p "$prompt" response
  done

  echo "$response" 

}

#auto-add-to-index () {


script_list=$(list-scripts)
script_list_index="$(jq -r '.commands[].name' "$SCRIPTSINDEX")"

#echo "$script_list"

count=1

while IFS= read -r script_list_line<&3;do
  script_name="$script_list_line"
  echo $'\n\n'"Script Name: \"$script_name\""$'\n'
  echo "$script_list_index"|grep -wq "$script_name"
  if [[ $? -eq 0 ]]; then
     echo " * - The script \"$script_name\" is already in the index, skipping! - * "
     continue
  else
    script_description="$(get_user_input "Enter Description: ")"
    end="$(get_user_input "Enter End: ")"
    platform="$(get_user_input "Enter Platform: ")"
  
    while IFS= read -r function_list_line<&4;do
      function_name="$function_list_line"
      if [[ -z $function_list_line ]]; then
        echo -e $'\n'" * - No Functions Found in \"$script_name\" - * "$'\n'
        continue
      else 
        echo $'\n'"  Function Found: \"$function_name\""
        function_description="$(get_user_input "  Enter Function Description: ")"
        
        functions_string+="{\"name\" : \""$function_name"\",\"description\" : \""$function_description"\" },"
      fi
    done 4<<< $(list-functions "$script_list_line")
  
    if [[ ! -z $functions_string ]]; then
      echo $'\n'* - No Further Functions Found - *$'\n'
      functions_string="[${functions_string:0:-1}]"
      #echo "$functions_string"
    else
      functions_string="[]"
    fi

    command_1="$(get_user_input "Enter Associated Commands: ")"
    dependant_1="$(get_user_input "Enter Dependant: ")"
    command_status="$(get_user_input "Enter Status: ")"
  
    json_string+="{\"name\" : \""$script_name"\",\"description\" : \""$script_description"\", \"end\" : \""$end"\", \"platform\" : \""$platform"\", \"functions\" : "$functions_string", \"associated commands\" : [ \""$command_1"\" ], \"dependants\" : [ \""$dependant_1"\" ], \"status\" : \""$command_status"\"},"

    #echo "$json_string"

    unset functions_string
    #((count=count+1))

    if [[ $count == 5 ]];then
      break
    fi
  fi

  echo $'\n'
  while true ;do
    read -p "\""$script_name"\" added. Add another? [y/n] " add_another
    case $add_another in
      y) continue 2 ;;
      n) break 2 ;;
    esac
  done

done 3<<< $script_list

json_string="'.command += [${json_string:0:-1}]'"

echo $'\n\n'"$json_string"


#TODO functions, associated commands &  dependants need to be in their own loop to allow multipe entries to be added to form a single string i.e. functions_string, associated_commands_string and dependants_string

#TODO string in the following form needs to be constructed accounting for the loops above
# .command += [{"name" : "$script_name","description" : "$script_description", "end" : "$end", "platform" : "$platform", "functions": [{ "name" : "$function_name", "description" : "$function_description" }], "associated commands" : [ "$command_1", "$command_2" ], "dependants" : [ "$dependant_1" , "$dependant_2" ], "status" : "$command_status"}, 


#

#test="$(auto-add-to-index)"

echo "$test"
